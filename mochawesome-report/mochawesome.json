{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-19T14:33:56.892Z",
    "end": "2023-01-19T14:33:57.904Z",
    "duration": 1012,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b1b5c584-ab3c-40b9-9e09-18181f3418cb",
      "title": "",
      "fullFile": "D:\\Nest Academy\\Practice\\apitesting-eve\\tests\\scenario\\register.test.js",
      "file": "\\tests\\scenario\\register.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "382c8844-39d8-4c90-a315-6a4bd4621faf",
          "title": "Register",
          "fullFile": "D:\\Nest Academy\\Practice\\apitesting-eve\\tests\\scenario\\register.test.js",
          "file": "\\tests\\scenario\\register.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successfull register when insert valid data",
              "fullTitle": "Register Should successfull register when insert valid data",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqresApi.register(userData.VALID_REGISTER);\nassert.equal(response.status, 200);\nassert.isNumber(response.data.id);\nassert.isString(response.data.token);",
              "err": {},
              "uuid": "c734597c-975c-4c23-b3d7-d4bc49277125",
              "parentUUID": "382c8844-39d8-4c90-a315-6a4bd4621faf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should unsuccessfull register when insert invalid data",
              "fullTitle": "Register Should unsuccessfull register when insert invalid data",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await reqresApi.register(userData.INVALID_REGISTER);\nassert.equal(response.status, 400);\nassert.isString(response.data.error);\nassert.equal(response.data.error, \"Missing password\");",
              "err": {},
              "uuid": "0ad12951-330f-411c-bf59-452a17ba272a",
              "parentUUID": "382c8844-39d8-4c90-a315-6a4bd4621faf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c734597c-975c-4c23-b3d7-d4bc49277125",
            "0ad12951-330f-411c-bf59-452a17ba272a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}